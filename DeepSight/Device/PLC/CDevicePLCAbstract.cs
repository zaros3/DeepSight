using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace HLDevice.Abstract
{
    public abstract class CDevicePLCAbstract
    {
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //생성 : 
        //수정 : 
        //목적 : 초기화 파라미터 객체
        //설명 : 
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public class CInitializeParameter : ICloneable
        {
            public enum enumPLCProtocolType { TYPE_BINARY, TYPE_ASCII, TYPE_FINAL };
            public enum enumPLCType { TYPE_PLC_Q, TYPE_PLC_R, TYPE_FINAL };
            // PLC 연결 타입
            public enumPLCProtocolType ePLCProtocolType;
            public enumPLCType ePLCType;
            // 주소
            public string strSocketIPAddress;
            // 포트
            public int iSocketPortNumber;
            // PLC 접근 주소 객체
            public Dictionary<string, CPLCParameter> objPLCParameter;
            // PLC IN, OUT Count ALL 채널
            public int iOutputCountAll;
            public int iInputCountAll;

            // PLC IN, OUT Count Bit 채널
            public int iOutputCountBit;
            public int iInputCountBit;

            // PLC IN, OUT Count DWord 채널
            public int iOutputCountWord;
            public int iInputCountWord;

            // PLC IN, OUT Count DWord 채널
            public int iOutputCountDWord;
            public int iInputCountDWord;

            // PLC UI접근
            public List<string> strPLCInput;
            public List<string> strPLCOutput;

            // 더블워드 Read/Write시 상수값
            public double dMultiple;

			public CInitializeParameter()
			{
				objPLCParameter = new Dictionary<string, CPLCParameter>();
			}

            public object Clone()
            {
                CInitializeParameter objInitializeParameter = new CInitializeParameter();
                objInitializeParameter.strSocketIPAddress = this.strSocketIPAddress;
                objInitializeParameter.iSocketPortNumber = this.iSocketPortNumber;
                objInitializeParameter.ePLCProtocolType = this.ePLCProtocolType;
                objInitializeParameter.ePLCType = this.ePLCType;
                objInitializeParameter.dMultiple = this.dMultiple;
                objInitializeParameter.objPLCParameter = new Dictionary<string, CPLCParameter>( this.objPLCParameter );
                
                return objInitializeParameter;
            }
        }

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //생성 : 
        //수정 : 
        //목적 : 접근 파라미터
        //설명 : 
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public class CPLCParameter : ICloneable
        {
            public enum enumPLCCommunicationType { TYPE_BIT_IN, TYPE_WORD_IN, TYPE_DWORD_IN, TYPE_BIT_OUT, TYPE_WORD_OUT, TYPE_DWORD_OUT };
            public enumPLCCommunicationType eCommunicationType;
            public string strAddress;
            public string strPLCName;
            public string strIndex;
            public int iInOutIndex;

            public object Clone()
            {
                CPLCParameter objPLCParameter = new CPLCParameter();
                objPLCParameter.eCommunicationType = this.eCommunicationType;
                objPLCParameter.strAddress = this.strAddress;
                objPLCParameter.strPLCName = this.strPLCName;
                objPLCParameter.strIndex = this.strIndex;
                objPLCParameter.iInOutIndex = this.iInOutIndex;

                return objPLCParameter;
            }
        }

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //생성 : 
        //추가 : 
        //목적 : 알람 발생 확인 클래스
        //설명 : 함수 호출 시 반환 형
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public class CMCProtocolError : ICloneable
        {
            // 이벤트 발생 시간
            public string strEventTime;
            // 수행된 함수 이름
            public string strFunctionName;
            // 알람 리턴 결과
            public int iReturnCode;
            // 알람 메세지
            public string strMessage;

            public object Clone()
            {
                CMCProtocolError objError = new CMCProtocolError();
                objError.strEventTime = this.strEventTime;
                objError.strFunctionName = this.strFunctionName;
                objError.iReturnCode = this.iReturnCode;
                objError.strMessage = this.strMessage;

                return objError;
            }
        }
        
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //생성 : 
        //수정 : 
        //목적 : 초기화 추상객체
        //설명 : 
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public abstract bool HLInitialize( CInitializeParameter objInitializeParameter );
                                 
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //생성 : 
        //수정 : 
        //목적 : 해제 추상객체
        //설명 : 
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public abstract void HLDeInitialize();

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //생성 : 
        //수정 : 
        //목적 : 버전 추상객체
        //설명 : 
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public abstract string HLGetVersion();

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //생성 : 
        //수정 : 
        //목적 : 접속 상태
        //설명 : 
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public virtual bool HLIsConnected()
        {
            bool bReturn = false;

            do
            {
            } while( false );

            return bReturn;
        }
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //생성 : 
        //수정 : 
        //목적 : 1개의 비트데이터 읽기
        //설명 : 
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public virtual bool HLReadBitFromPLC( string strName, ref bool bReadData, string strKey = "" )
        {
            bool bReturn = false;

            do {
            } while( false );

            return bReturn;
        }

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //생성 : 
        //수정 : 
        //목적 : 시작주소에서 설정된 사이즈만큼 읽어온다
        //설명 : 
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public virtual bool HLReadBitFromPLC( string strName, int iCount, ref bool[] bReadData, string strKey = "" )
        {
            bool bReturn = false;
            do {
                
            } while( false );

            return bReturn;
        }

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //생성 : 
        //수정 : 
        //목적 :
        //설명 : 
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public virtual bool HLReadWordFromPLC( string strName, int iCount, ref short[] dReadData, string strKey = "" )
        {
            bool bReturn = false;
            do {
                
            } while( false );

            return bReturn;
        }

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //생성 : 
        //수정 : 
        //목적 :
        //설명 : 
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public virtual bool HLReadWordASCIIFromPLC( string strName, int iCount, ref string strReadData, string strKey = "" )
        {
            bool bReturn = false;
            do {

            } while( false );

            return bReturn;
        }

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //생성 : 
        //수정 : 
        //목적 :
        //설명 : 
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public virtual bool HLReadDoubleWordFromPLC( string strName, ref double dReadData, string strKey = "" )
        {
            bool bReturn = false;
            do {
                
            } while( false );

            return bReturn;
        }

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //생성 : 
        //수정 : 
        //목적 :
        //설명 : 
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public virtual bool HLReadDoubleWordFromPLC( string strName, int iCount, ref double[] dReadData, string strKey = "" )
        {
            bool bReturn = false;
            do {
                
            } while( false );

            return bReturn;
        }

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //생성 : 
        //수정 : 
        //목적 :
        //설명 : 
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public virtual bool HLWriteBitFromPLC( string strName, bool bWriteData, string strKey = "" )
        {
            bool bReturn = false;
            do {
                
            } while( false );

            return bReturn;
        }

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //생성 : 
        //수정 : 
        //목적 :
        //설명 : 
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public virtual bool HLWriteBitFromPLC( string strName, int iCount, bool[] bWriteData, string strKey = "" )
        {
            bool bReturn = false;
            do {
                
            } while( false );

            return bReturn;
        }

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //생성 : 
        //수정 : 
        //목적 :
        //설명 : 
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public virtual bool HLWriteWordBitFromPLC( string strName, int iCount, bool[] bWriteData, string strKey = "" )
        {
            bool bReturn = false;
            do {
                
            } while( false );

            return bReturn;
        }

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //생성 : 
        //수정 : 
        //목적 :
        //설명 : 
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public virtual bool HLWriteWordFromPLC(string strName, short sWriteData, string strKey = "")
        {
            bool bReturn = false;
            do
            {

            } while (false);

            return bReturn;
        }

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //생성 : 
        //수정 : 
        //목적 :
        //설명 : 
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public virtual bool HLWriteWordFromPLC( string strName, int iCount, short[] sData, string strKey = "" )
        {
            bool bReturn = false;
            do {
                
            } while( false );

            return bReturn;
        }

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //생성 : 
        //수정 : 
        //목적 :
        //설명 : 
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public virtual bool HLWriteWordFromPLC( string strName, double dWriteData, string strKey = "" )
        {
            bool bReturn = false;
            do {
                
            } while( false );

            return bReturn;
        }

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //생성 : 
        //수정 : 
        //목적 :
        //설명 : 
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public virtual bool HLWriteWordFromPLC( string strName, int iCount, double[] dData, string strKey = "" )
        {
            bool bReturn = false;
            do {
                
            } while( false );

            return bReturn;
        }
    

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //생성 : 
        //추가 : 
        //목적 : 현재 알람 상태 정보를 리턴한다.
        //설명 : 
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public virtual HLDevice.Abstract.CDevicePLCAbstract.CMCProtocolError HLGetErrorCode()
        {
            HLDevice.Abstract.CDevicePLCAbstract.CMCProtocolError objError = new HLDevice.Abstract.CDevicePLCAbstract.CMCProtocolError();
            return objError;
        }
    }
}
