using System;
using System.Collections.Generic;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace HLDevice.Abstract
{
    public abstract class CVisionLibraryAbstract
    {
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //생성 : 
        //수정 : 
        //목적 : 초기화 파라미터
        //설명 : 
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public class CInitializeParameter : ICloneable
        {
            // 인덱스
            public int iIndex;
            // 레시피 경로
            public string strRecipePath;
            // 레시피 이름
            public string strRecipeName;

            public object Clone()
            {
                CInitializeParameter objInitializeParameter = new CInitializeParameter();
                objInitializeParameter.iIndex = iIndex;
                objInitializeParameter.strRecipePath = strRecipePath;
                objInitializeParameter.strRecipeName = strRecipeName;
                return objInitializeParameter;
            }
        }

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //생성 : 
        //수정 : 
        //목적 : 결과 객체
        //설명 : 
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public class CResultData : ICloneable
        {
            public enum enumLine { LINE_HORIZON = 0, LINE_VERTICAL, LINE_FINAL }
            public enum enumLibrary { PMALIGN = 0, FINDLINE_INTERSECT, IMAGEPROCESS, CALIBRATION, FINAL };
            public enum enumInspectPosition { INSPECT_POSITION_1 = 0, INSPECT_POSITION_FINAL };
            // 검사 결과
            public bool bResult;
            // 사용된 라이브러리
            public enumLibrary eLibrary;
            // 좌표
            public double[] dPositionX = new double[ ( int )enumInspectPosition.INSPECT_POSITION_FINAL ];
            public double[] dPositionY = new double[ ( int )enumInspectPosition.INSPECT_POSITION_FINAL ];
            public double[] dPositionAngle = new double[ ( int )enumInspectPosition.INSPECT_POSITION_FINAL ];
            public double[] dScore = new double[ ( int )enumInspectPosition.INSPECT_POSITION_FINAL ];

            // 라인찾기 결과
            public double[] dLinePositionX = new double[ ( int )enumLine.LINE_FINAL ];
            public double[] dLinePositionY = new double[ ( int )enumLine.LINE_FINAL ];
            public double[] dLineAngle = new double[ ( int )enumLine.LINE_FINAL ];
            public object[] objLineGraphics = null;

            // 이미지
            public Bitmap bitmapInputImage = null;
            public Bitmap bitmapResultImage = null;
            public object[] objGraphics = new object[ ( int )Abstract.CVisionLibraryAbstract.CResultData.enumInspectPosition.INSPECT_POSITION_FINAL ];

            public Cognex.VisionPro.CogImage8Grey objCogImage;

            public object Clone()
            {
                CResultData objResultData = new CResultData();
                objResultData.bResult = bResult;
                objResultData.eLibrary = eLibrary;
                objResultData.bitmapInputImage = bitmapInputImage;                   objResultData.bitmapResultImage = bitmapResultImage;                             objResultData.objGraphics = (object[])objGraphics.Clone();                                               objResultData.objLineGraphics = objLineGraphics;
                objResultData.dPositionX = ( double[] )dPositionX.Clone();               objResultData.dPositionY = ( double[] )dPositionY.Clone();                           objResultData.dPositionAngle = ( double[] )dPositionAngle.Clone();                 objResultData.dScore = ( double[] )dScore.Clone();
                objResultData.dLinePositionX = ( double[] )dLinePositionX.Clone();      objResultData.dLinePositionY = ( double[] )dLinePositionY.Clone();                 objResultData.dLineAngle = ( double[] )dLineAngle.Clone();
                
                return objResultData;
            }
        }

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //생성 : 
        //추가 : 
        //목적 : 알람 발생 확인 클래스
        //설명 : 함수 호출 시 반환 형
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public class CVisionLibraryError : ICloneable
        {
            // 이벤트 발생 시간
            public string strEventTime;
            // 수행된 함수 이름
            public string strFunctionName;
            // 알람 리턴 결과
            public int iReturnCode;
            // 알람 메세지
            public string strMessage;

            public object Clone()
            {
                CVisionLibraryError objError = new CVisionLibraryError();
                objError.strEventTime = this.strEventTime;
                objError.strFunctionName = this.strFunctionName;
                objError.iReturnCode = this.iReturnCode;
                objError.strMessage = this.strMessage;

                return objError;
            }
        }
        
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //생성 : 
        //수정 : 
        //목적 : 초기화 추상객체
        //설명 : 
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public abstract bool HLInitialize( CInitializeParameter objInitializeParameter );
                                 
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //생성 : 
        //수정 : 
        //목적 : 해제 추상객체
        //설명 : 
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public abstract void HLDeInitialize();

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //생성 : 
        //수정 : 
        //목적 : 버전 추상객체
        //설명 : 
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public abstract string HLGetVersion();

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //생성 : 
        //수정 : 
        //목적 : Load 추상객체
        //설명 : 
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public abstract bool HLLoadRecipe( string strRecipePath, string strRecipeName );


        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //생성 : 
        //수정 : 
        //목적 : Save 추상객체
        //설명 : 
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public abstract bool HLSaveRecipe( string strRecipePath, string strRecipeName );

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //생성 : 
        //수정 : 
        //목적 : Run 추상객체
        //설명 : 
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public abstract bool HLRun( Bitmap bipmapImage, out CResultData objResultData );

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //생성 : 
        //수정 : 
        //목적 : Run 추상객체
        //설명 : 
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public virtual bool HLRun( Cognex.VisionPro.CogImage8Grey objCogImage, out HLDevice.Abstract.CVisionLibraryAbstract.CResultData objResultData, bool bUseCalibrationImage = true )
        {
            objResultData = new CResultData();
            bool bReturn = false;
            do {

            } while( false );

            return bReturn;
        }

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //생성 : 
        //수정 : 
        //목적 : Run 추상객체
        //설명 : 
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public virtual void SetIdle()
        {
        }

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //생성 : 
        //수정 : 
        //목적 : 결과 추상객체
        //설명 : 
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public abstract bool HLGetResult( out CResultData objResultData );

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //생성 : 
        //수정 : 
        //목적 : 비전라이브러리 참조반환 추상객체
        //설명 : 
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public abstract object HLGetReferenceLibrary();


        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //생성 : 
        //추가 : 
        //목적 : 현재 알람 상태 정보를 리턴한다.
        //설명 : 
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public virtual HLDevice.Abstract.CVisionLibraryAbstract.CVisionLibraryError HLGetErrorCode()
        {
            HLDevice.Abstract.CVisionLibraryAbstract.CVisionLibraryError objError = new HLDevice.Abstract.CVisionLibraryAbstract.CVisionLibraryError();
            return objError;
        }
    }
}
