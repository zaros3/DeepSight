using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace HLDevice.Abstract
{
    public abstract class CDeviceIOAbstract
    {
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //enum
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        // IO 타입 정의
        public enum enumIOType { IO_TYPE_DI = 0, IO_TYPE_DO, IO_TYPE_AI, IO_TYPE_AO, IO_TYPE_FINAL };
        // ADLink PCI Card Type
        public enum enumDeviceCardType
        {
            PCI_6208V = 1,
            PCI_6208A = 2,
            PCI_6308V = 3,
            PCI_6308A = 4,
            PCI_7200 = 5,
            PCI_7230 = 6,
            PCI_7233 = 7,
            PCI_7234 = 8,
            PCI_7248 = 9,
            PCI_7249 = 10,
            PCI_7250 = 11,
            PCI_7252 = 12,
            PCI_7296 = 13,
            PCI_7300A_RevA = 14,
            PCI_7300A_RevB = 15,
            PCI_7432 = 16,
            PCI_7433 = 17,
            PCI_7434 = 18,
            PCI_8554 = 19,
            PCI_9111DG = 20,
            PCI_9111HR = 21,
            PCI_9112 = 22,
            PCI_9113 = 23,
            PCI_9114DG = 24,
            PCI_9114HG = 25,
            PCI_9118DG = 26,
            PCI_9118HG = 27,
            PCI_9118HR = 28,
            PCI_9810 = 29,
            PCI_9812 = 30,
            PCI_7396 = 31,
            PCI_9116 = 32,
            PCI_7256 = 33,
            PCI_7258 = 34,
            PCI_7260 = 35,
            PCI_7452 = 36,
            PCI_7442 = 37,
            PCI_7443 = 38,
            PCI_7444 = 39,
            PCI_9221 = 40,
            PCI_9524 = 41,
            PCI_6202 = 42,
            PCI_9222 = 43,
            PCI_9223 = 44,
            PCI_7433C = 45,
            PCI_7434C = 46,
            PCI_922A = 47,
            PCI_7350 = 48,
            PCI_7360 = 49,
            PCI_7300A_RevC = 50,
        }
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //structure
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //private property
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //protected property
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //public property
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //생성 : 
        //수정 : 
        //목적 : 초기화 파라미터
        //설명 : 
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public class CIOParameter : ICloneable
        {
            public enumIOType eIOType;
            public string strAddress;
            public string strIOName;
            public string strIndex;
            public int iDeviceCardID;
            public object Clone()
            {
                CIOParameter objIOParameter = new CIOParameter();
                objIOParameter.eIOType = this.eIOType;
                objIOParameter.strAddress = this.strAddress;
                objIOParameter.strIOName = this.strIOName;
                objIOParameter.strIndex = this.strIndex;
                objIOParameter.iDeviceCardID = this.iDeviceCardID;

                return objIOParameter;
            }
        }

        public class CIOInitializeParameter : ICloneable
        {
            // Dask보드 타입
            public enumDeviceCardType eDeviceCardType;
            // 카드 수량( 카드가2장 들어갈 수 있음 )
            public int iCountDeviceCard;
            // Input IO 모듈 갯수
            public int iInputModuleCount;
            // Output IO 모듈 갯수
            public int iOutPutModuleCount;
            // 개벌 IO 정보 map
            public Dictionary<string, CIOParameter> objIOParameter;

			public CIOInitializeParameter()
			{
				objIOParameter = new Dictionary<string, CIOParameter>();
			}

            public object Clone()
            {
                CIOInitializeParameter objInitializeParameter = new CIOInitializeParameter();
                objInitializeParameter.objIOParameter = new Dictionary<string, CIOParameter>( objIOParameter );

                objInitializeParameter.eDeviceCardType = this.eDeviceCardType;
                objInitializeParameter.iCountDeviceCard = this.iCountDeviceCard;
                objInitializeParameter.iInputModuleCount = this.iInputModuleCount;
                objInitializeParameter.iOutPutModuleCount = this.iOutPutModuleCount;

                return objInitializeParameter;
            }
        }

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //생성 : 
        //수정 : 
        //목적 : 초기화 추상 함수
        //설명 : 
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public abstract bool HLInitialize( CIOInitializeParameter objInitializeParameter );

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //생성 : 
        //수정 : 
        //목적 : 해제 추상 함수
        //설명 : 
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public abstract void HLDeInitialize();

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //생성 : 
        //수정 : 
        //목적 : 버전 정보 추상 함수
        //설명 : 
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public abstract string HLGetVersion();

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //생성 : 
        //수정 : 
        //목적 : DI, DO 입력 신호를 Bit로 읽어온다.
        //설명 : 
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public abstract bool HLGetDigitalBit( string strIOName, ref bool bResult );

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //생성 : 
        //수정 : 
        //목적 : DO 출력 신호 Bit 입력
        //설명 : 
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public abstract bool HLSetDigitalBit( string strIOName, bool bResult );

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //생성 : 
        //수정 : 
        //목적 : DI, DO 입력 신호를 Byte로 읽어온다,
        //설명 : 
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public abstract bool HLGetDigitalByte( string strIOName, ref bool[] bResult );

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //생성 : 
        //수정 : 
        //목적 : DI, DO 입력 신호를 Byte로 입력
        //설명 : 
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public abstract bool HLSetDigitalByte( string strIOName, bool[] bResult );

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //생성 : 
        //수정 : 
        //목적 : DI, DO 입력 신호를 Word로 읽어온다,
        //설명 : 
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public abstract bool HLGetDigitalWord( string strIOName, ref bool[] bResult );

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //생성 : 
        //수정 : 
        //목적 : DI, DO 입력 신호를 Word로 입력
        //설명 : 
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public abstract bool HLSetDigitalWord( string strIOName, bool[] bResult );

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //생성 : 
        //수정 : 
        //목적 : DI, DO 입력 신호를 DoubleWord로 읽어온다,
        //설명 : 
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public abstract bool HLGetDigitalDoubleWord( string strIOName, ref bool[] bResult );

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //생성 : 
        //수정 : 
        //목적 : DI, DO 입력 신호를 DoubleWord로 입력
        //설명 : 
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public abstract bool HLSetDigitalDoubleWord( string strIOName, bool[] bResult );

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //생성 : 
        //수정 : 
        //목적 : AIO 지정한 입력 채널의 아날로그 입력값을 전압으로 반환 한다.
        //설명 : 
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public abstract bool HLGetAnalog( string strChannelName, ref double dValue );

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //생성 : 
        //수정 : 
        //목적 : AIO 지정한 입력 채널의 아날로그 입력값을 전압으로 반환 한다.
        //설명 : 
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public abstract bool HLSetAnalog( string strChannelName, double dValue );

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //생성 : 
        //수정 : 
        //목적 : 알람 객체를 반환 한다.
        //설명 : 
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public abstract object HLGetErrorCode();
    }
}
