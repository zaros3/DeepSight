using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Threading;
using HLDevice.Abstract;
using System.Diagnostics;
using System.Drawing;

namespace HLDevice.Camera
{
	public class CDeviceCameraVirtual : CDeviceCameraAbstract
	{
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// private
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// 카메라 인덱스
		private int m_iCameraIndex;
		// 카메라 에러
		private CDeviceCameraAbstract.CCameraError m_objError;
		// 이미지 데이터
		private List<CDeviceCameraAbstract.CImageData> m_lstImageData;
		// X축 이미지 반전 유무
		private bool m_bReverseX;
		// Y축 이미지 반전 유무
		private bool m_bReverseY;
		// 이미지 90도 회전 유무
		private bool m_bRotation90;
		// 이미지 180도 회전 유무
		private bool m_bRotation180;
		// 이미지 270도 회전 유무
		private bool m_bRotation270;
		// 이미지 인덱스
		private int m_iImageIndex = 0;
		// 프로세스 종료
		private bool m_bThreadExit;
		// 라이브 스레드
		private Thread m_ThreadProcessLive;
		// 라이브 유무
		private bool m_bLive;
		// 프레임 레이트
		private double m_dFrameRate;
		// 그랩 콜백
		private CallBackFunctionGrabImage m_objCallback;
		// Trace 콜백
		private CallBackTraceMessage m_objCallbackTraceMessage;
		// 그랩 에러 콜백
		private CallBackGrabError m_objCallbackGrabError;

        private const int DEF_COUNT_MULTI_GRAB = 4;
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//생성 : 
		//수정 : 
		//목적 : 
		//설명 : 
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		public CDeviceCameraVirtual()
		{
			m_bThreadExit = false;
			m_objCallback = null;
			m_objCallbackTraceMessage = null;
			m_objCallbackGrabError = null;
			m_objError = new CDeviceCameraAbstract.CCameraError();
			m_lstImageData = new List<CImageData>();
		}

		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//생성 : 
		//수정 : 
		//목적 : 해제
		//설명 : 
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		public override string HLGetVersion()
		{
			return "1.0.0.1";
		}

		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//생성 : 
		//수정 : 
		//목적 : 초기화
		//설명 : 
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		public override bool HLInitialize( HLDevice.Abstract.CDeviceCameraAbstract.CInitializeParameter objInitializeParameter )
		{
			bool bReturn = false;

			do {
				// 변수 초기화
				m_bReverseX = false;
				m_bReverseY = false;
				m_bRotation90 = false;
				m_bRotation180 = false;
				m_bRotation270 = false;
				m_iCameraIndex = objInitializeParameter.iIndex;
				InitializeImage();
				// 프레임 레이트
				m_dFrameRate = objInitializeParameter.objCameraConfig.dFrameRate;
				// 라이브 스레드 초기화
				m_ThreadProcessLive = new Thread( ThreadProcessLive );
				m_ThreadProcessLive.Start( this );
                HLStartSingleGrab();

                bReturn = true;
			} while( false );

			return bReturn;
		}

		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//생성 : 
		//수정 : 
		//목적 : 해제
		//설명 : 
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		public override void HLDeInitialize()
		{
			// 라이브 스레드 종료
			m_bThreadExit = true;
			m_ThreadProcessLive.Join();
		}

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //생성 : 
        //수정 : 
        //목적 : 실제 카메라 타입 일 경우 카메라 객체 리턴 함수
        //설명 : 
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public override object HLGetDeviceObject()
        {
            return 0;
        }

		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//생성 : 
		//수정 : 
		//목적 : 특정 폴더 이미지를 로딩하여 가상 모드에서 사용
		//설명 : 
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		private bool InitializeImage()
		{
			bool bReturn = false;

			do {
				var pDocument = DeepSight.CDocument.GetDocument;

				try {
					// 프로젝트 bin 폴더
					// 수정 - 타입 & 카메라별 시뮬레이션 이미지 폴더 따로 관리
					string strImagePath = string.Format( @"{0}\{1}\{2}\{3}{4:D}",
						System.IO.Directory.GetCurrentDirectory(),
						DeepSight.CDefine.DEF_SIMULATION_IMAGE_PATH,
						pDocument.m_objConfig.GetSystemParameter().eMachineType.ToString(),
						DeepSight.CDefine.DEF_SIMULATION_IMAGE_PATH, m_iCameraIndex );
					// 폴더 내 파일 목록 불러오기
					string[] arFileNames = System.IO.Directory.GetFiles( strImagePath + "\\" );
					// 폴더 내의 파일 수만큼 루프
					for( int iLoopCount = 0; iLoopCount < arFileNames.Length; iLoopCount++ ) {
						CImageData objImageData = new CImageData();
						objImageData.bitmapImage = new Bitmap( arFileNames[ iLoopCount ] );
						objImageData.bGrabComplete = true;
						m_lstImageData.Add( objImageData );
					}
				}
				catch( System.Exception ex ) {
					if( null != m_objCallbackTraceMessage ) {
						m_objCallbackTraceMessage( ex.Message + "->" + ex.StackTrace );
					}
					break;
				}

				bReturn = true;
			} while( false );

			return bReturn;
		}

		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//생성 : 
		//수정 : 
		//목적 : 접속 상태
		//설명 : 
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		public override bool HLIsConnected()
		{
			return true;
		}

		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//생성 : 
		//수정 : 
		//목적 : Camera Config ( Gain, Reverse .. )
		//설명 : 
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		public override bool HLSetCameraConfig( CInitializeParameter.structureCameraConfig objCameraConfig )
		{
			bool bReturn = false;

			do {
				if( false == HLSetRotation90( objCameraConfig.bRotation90 ) ) break;
				if( false == HLSetRotation180( objCameraConfig.bRotation180 ) ) break;
				if( false == HLSetRotation270( objCameraConfig.bRotation270 ) ) break;

				bReturn = true;
			} while( false );

			return bReturn;
		}

		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//생성 : 
		//수정 : 
		//목적 : 콜백
		//설명 : 
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		public override void HLSetCallbackFunctionGrabImage( CallBackFunctionGrabImage objCallback )
		{
			m_objCallback = objCallback;
		}

		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//생성 : 
		//수정 : 
		//목적 : Trace 콜백
		//설명 : 
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		public override void HLSetCallbackTraceMessage( CallBackTraceMessage objCallback )
		{
			m_objCallbackTraceMessage = objCallback;
		}

		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//생성 : 
		//수정 : 
		//목적 : 그랩 에러 콜백
		//설명 : 
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		public override void HLSetCallbackGrabError( CallBackGrabError objCallback )
		{
			m_objCallbackGrabError = objCallback;
		}

		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//생성 : 
		//수정 : 
		//목적 : 게인 값 반환
		//설명 : 
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		public override double HLGetGain()
		{
			return base.HLGetGain();
		}

		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//생성 : 
		//수정 : 
		//목적 : 게인 값 설정
		//설명 : 
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		public override bool HLSetGain( double dGain )
		{
			bool bReturn = false;

			do {

				bReturn = true;
			} while( false );

			return bReturn;
		}

		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//생성 : 
		//수정 : 
		//목적 : 노출 시간 반환
		//설명 : 
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		public override double HLGetExposureTime()
		{
			return base.HLGetExposureTime();
		}

		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//생성 : 
		//수정 : 
		//목적 : 노출 시간 설정
		//설명 : 
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		public override bool HLSetExposureTime( double dExposureTime )
		{
			bool bReturn = false;

			do {

				bReturn = true;
			} while( false );

			return bReturn;
		}

		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//생성 : 
		//수정 : 
		//목적 : 카메라 픽셀 넓이 반환
		//설명 : 
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		public override int HLGetWidth()
		{
			return base.HLGetWidth();
		}

		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//생성 : 
		//수정 : 
		//목적 : 카메라 픽셀 넓이 설정
		//설명 : 
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		public override bool HLSetWidth( int iWidth )
		{
			bool bReturn = false;

			do {

				bReturn = true;
			} while( false );

			return bReturn;
		}

		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//생성 : 
		//수정 : 
		//목적 : 카메라 픽셀 높이 반환
		//설명 : 
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		public override int HLGetHeight()
		{
			return base.HLGetHeight();
		}

		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//생성 : 
		//수정 : 
		//목적 : 카메라 픽셀 높이 설정
		//설명 : 
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		public override bool HLSetHeight( int iHeight )
		{
			bool bReturn = false;

			do {

				bReturn = true;
			} while( false );

			return bReturn;
		}

		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//생성 : 
		//수정 : 
		//목적 : 카메라 X Offset 반환
		//설명 : 
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		public override int HLGetXOffset()
		{
			return base.HLGetXOffset();
		}

		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//생성 : 
		//수정 : 
		//목적 : 카메라 X Offset 설정
		//설명 : 
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		public override bool HLSetXOffset( int iOffset )
		{
			bool bReturn = false;

			do {

				bReturn = true;
			} while( false );

			return bReturn;
		}

		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//생성 : 
		//수정 : 
		//목적 : 카메라 Y Offset 반환
		//설명 : 
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		public override int HLGetYOffset()
		{
			return base.HLGetYOffset();
		}

		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//생성 : 
		//수정 : 
		//목적 : 카메라 Y Offset 설정
		//설명 : 
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		public override bool HLSetYOffset( int iOffset )
		{
			bool bReturn = false;

			do {

				bReturn = true;
			} while( false );

			return bReturn;
		}

		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//생성 : 
		//수정 : 
		//목적 : 프레임 비율 반환
		//설명 : 
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		public override double HLGetFrameRate()
		{
			return base.HLGetFrameRate();
		}

		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//생성 : 
		//수정 : 
		//목적 : 프레임 비율 설정
		//설명 : 
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		public override bool HLSetFrameRate( double dFrameRate )
		{
			bool bReturn = false;

			do {

				bReturn = true;
			} while( false );

			return bReturn;
		}

		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//생성 : 
		//수정 : 
		//목적 : 하트비트 타임 아웃 설정
		//설명 : 
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		public override bool HLSetHeartBeatTimeOut( int iMilliseconds )
		{
			bool bReturn = false;

			do {

				bReturn = true;
			} while( false );

			return bReturn;
		}

		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//생성 : 
		//수정 : 
		//목적 : X축 이미지 반전
		//설명 : 
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		public override bool HLSetReverseX( bool bReverse )
		{
			bool bReturn = false;

			do {
				m_bReverseX = bReverse;

				bReturn = true;
			} while( false );

			return bReturn;
		}

		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//생성 : 
		//수정 : 
		//목적 : Y축 이미지 반전
		//설명 : 
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		public override bool HLSetReverseY( bool bReverse )
		{
			bool bReturn = false;

			do {
				m_bReverseY = bReverse;

				bReturn = true;
			} while( false );

			return bReturn;
		}

		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//생성 : 
		//수정 : 
		//목적 : 이미지 90도 회전
		//설명 : 
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		public override bool HLSetRotation90( bool bRotation )
		{
			bool bReturn = false;

			do {
				m_bRotation90 = bRotation;

				bReturn = true;
			} while( false );

			return bReturn;
		}

		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//생성 : 
		//수정 : 
		//목적 : 이미지 180도 회전
		//설명 : 
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		public override bool HLSetRotation180( bool bRotation )
		{
			bool bReturn = false;

			do {
				m_bRotation180 = bRotation;

				bReturn = true;
			} while( false );

			return bReturn;
		}

		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//생성 : 
		//수정 : 
		//목적 : 이미지 270도 회전
		//설명 : 
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		public override bool HLSetRotation270( bool bRotation )
		{
			bool bReturn = false;

			do {
				m_bRotation270 = bRotation;

				bReturn = true;
			} while( false );

			return bReturn;
		}

		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//생성 : 
		//수정 : 
		//목적 : 패킷 사이즈 반환
		//설명 : 
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		public override int HLGetPacketSize()
		{
			return base.HLGetPacketSize();
		}

		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//생성 : 
		//수정 : 
		//목적 : 패킷 사이즈 설정
		//설명 : 
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		public override bool HLSetPacketSize( int iPacketSize )
		{
			bool bReturn = false;

			do {

				bReturn = true;
			} while( false );

			return bReturn;
		}

		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//생성 : 
		//수정 : 
		//목적 : 트리거 셀렉터 변경
		//설명 : 
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		public override bool HLSetTriggerSelector( CDeviceCameraAbstract.enumTriggerSelector eTriggerSelector )
		{
			bool bReturn = false;

			do {

				bReturn = true;
			} while( false );

			return bReturn;
		}

		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//생성 : 
		//수정 : 
		//목적 : 트리거 모드 변경
		//설명 : 
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		public override bool HLSetTriggerMode( CDeviceCameraAbstract.enumTriggerMode eTriggerMode )
		{
			bool bReturn = false;

			do {

				bReturn = true;
			} while( false );

			return bReturn;
		}

		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//생성 : 
		//수정 : 
		//목적 : 트리거 소스 변경
		//설명 : 
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		public override bool HLSetTriggerSource( CDeviceCameraAbstract.enumTriggerSource eTriggerSource )
		{
			bool bReturn = false;

			do {

				bReturn = true;
			} while( false );

			return bReturn;
		}

		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//생성 : 
		//수정 : 
		//목적 : StartSingleGrab
		//설명 : 
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		public override bool HLStartSingleGrab()
		{
			bool bReturn = false;

			do {

				if( null != m_objCallback ) {
                    if( 0 == m_lstImageData.Count ) break;
					CImageData objImageData = m_lstImageData[ m_iImageIndex ].Clone() as CImageData;
					objImageData.iImageWidth = objImageData.bitmapImage.Width;
					objImageData.iImageWidth = objImageData.bitmapImage.Height;

					m_objCallback( ( CImageData )objImageData.Clone() );
				}
				m_iImageIndex++;

				if( m_iImageIndex >= m_lstImageData.Count )
					m_iImageIndex = 0;

				bReturn = true;
			} while( false );

			return bReturn;
		}

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //생성 : 
        //수정 : 
        //목적 : StartSingleGrab
        //설명 : 
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public override bool HLStartMultiGrab()
        {
            bool bReturn = false;

            do
            {

                if ( null != m_objCallback )
                {
                    if ( 0 == m_lstImageData.Count ) break;

                    for( int iLoopCount = 0; iLoopCount < DEF_COUNT_MULTI_GRAB; iLoopCount++ )
                    {
                        CImageData objImageData = m_lstImageData[ m_iImageIndex ].Clone() as CImageData;
                        objImageData.iImageWidth = objImageData.bitmapImage.Width;
                        objImageData.iImageHeight = objImageData.bitmapImage.Height;
                        objImageData.iMultiGrabImageIndex = iLoopCount;
                        m_objCallback( ( CImageData )objImageData.Clone() );

                        m_iImageIndex++;

                        if ( m_iImageIndex >= m_lstImageData.Count )
                            m_iImageIndex = 0;
                    }
                    
                }


                bReturn = true;
            } while ( false );

            return bReturn;
        }


        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //생성 : 
        //수정 : 
        //목적 : SetContinousGrab
        //설명 : 
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public override bool HLSetContinousGrab()
		{
			bool bReturn = false;

			do {
				m_bLive = true;

				bReturn = true;
			} while( false );

			return bReturn;
		}

		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//생성 : 
		//수정 : 
		//목적 : SetSingleGrab
		//설명 : 
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		public override bool HLSetSingleGrab()
		{
			bool bReturn = false;

			do {
				m_bLive = false;

				bReturn = true;
			} while( false );

			return bReturn;
		}

		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//생성 : 
		//수정 : 
		//목적 : 소프트웨어 트리거
		//설명 : 
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		public override bool HLSetSoftwareTrigger()
		{
			bool bReturn = false;

			do {
				
				bReturn = true;
			} while( false );

			return bReturn;
		}

		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//생성 : 
		//추가 : 
		//목적 : DLL에서 나온 에러를 현재 클래스에 맞게 변환한다
		//설명 : 
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		private void MakeError()
		{

		}

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //생성 : 
        //추가 : 
        //목적 : 이미지로딩 검사
        //설명 : 
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public override bool HLSetImageFile( string strPath )
        {
            bool bReturn = false;
            do {
                var pDocument = DeepSight.CDocument.GetDocument;

                try {
                    m_lstImageData.Clear();
                    m_iImageIndex = 0;
                    // 프로젝트 bin 폴더
                    // 수정 - 타입 & 카메라별 시뮬레이션 이미지 폴더 따로 관리
                    string strImagePath = strPath;
                    // 폴더 내 파일 목록 불러오기
                    string[] arFileNames = System.IO.Directory.GetFiles( strImagePath + "\\" );
                    // 폴더 내의 파일 수만큼 루프
                    for( int iLoopCount = 0; iLoopCount < arFileNames.Length; iLoopCount++ ) {
                        if( -1 != arFileNames[ iLoopCount ].IndexOf( "Origin_VIDI" ) ) {
                            CImageData objImageData = new CImageData();
                            objImageData.bitmapImage = new Bitmap( arFileNames[ iLoopCount ] );
                            objImageData.bGrabComplete = true;
                            m_lstImageData.Add( objImageData );
                        }
                    }

                    arFileNames = System.IO.Directory.GetFiles( strImagePath + "\\" );
                    // 폴더 내의 파일 수만큼 루프
                    for( int iLoopCount = 0; iLoopCount < arFileNames.Length; iLoopCount++ ) {
                        if( -1 != arFileNames[ iLoopCount ].IndexOf( "Origin_Measure" ) ) {
                            CImageData objImageData = new CImageData();
                            objImageData.bitmapImage = new Bitmap( arFileNames[ iLoopCount ] );
                            objImageData.bGrabComplete = true;
                            m_lstImageData.Add( objImageData );
                        }
                    }

                } catch( System.Exception ex ) {
                    System.Diagnostics.Trace.WriteLine( ex.ToString() );
                    break;
                }
                bReturn = true;
            } while( false );

            return bReturn;
        }

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //생성 : 
        //추가 : 
        //목적 : 현재 알람 상태 정보를 리턴한다.
        //설명 : 
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public override HLDevice.Abstract.CDeviceCameraAbstract.CCameraError HLGetErrorCode()
		{
			return ( HLDevice.Abstract.CDeviceCameraAbstract.CCameraError )m_objError.Clone();
		}

		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//생성 : 
		//추가 : 
		//목적 : 라이브 쓰레드
		//설명 : 
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		private static void ThreadProcessLive( object state )
		{
			CDeviceCameraVirtual pThis = ( CDeviceCameraVirtual )state;

			while( false == pThis.m_bThreadExit ) {
				if( true == pThis.m_bLive ) {
					pThis.HLStartSingleGrab();
				}

				int iSleepPeriod = 100;
				if( 0 < ( int )pThis.m_dFrameRate && 100 >= ( int )pThis.m_dFrameRate ) {
					iSleepPeriod = ( int )( 1000 / ( int )pThis.m_dFrameRate );
				}
				Thread.Sleep( iSleepPeriod );
			}
		}
	}
}