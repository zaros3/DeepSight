using System;
using System.Collections.Generic;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace HLDevice.Abstract
{
	public abstract class CDeviceCameraAbstract
	{
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// public
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// 트리거 셀렉터
		public enum enumTriggerSelector { ACQUISITION_START = 0, FRAME_START };
		// 트리거 모드
		public enum enumTriggerMode { OFF = 0, ON };
		// 트리거 소스
		public enum enumTriggerSource { SOFTWARE = 0, LINE1, LINE2, LINE3 };
        // 라인 셀렉터
        public enum enumLineSelector {  LINE1 = 0, LINE2, LINE3, LINE4 };
        // 라인 소스
        public enum enumLineSource { ACQUISITIONTRIGGERREADY = 0, ACQUISITIONTRIGGERWAIT, EXPOSUREACTIVE, FLASHWINDOW, FRAMECYCLE, FRAMETRIGGERWAIT, FREQUENCYCONVERTER, LINETRIGGERWAIT  };

		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//생성 : 
		//수정 : 
		//목적 : 초기화 파라미터
		//설명 : 
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		public class CInitializeParameter : ICloneable
		{
            public enum enumUseCameraType {  USE_REAL_CAMERA_TYPE = 0, USE_VIRTUAL_CAMERA_TYPE };
            // 가상 카메라 유무
            public enumUseCameraType eUseCameraType;
			// 카메라 인덱스
			public int iIndex;
			//카메라 시리얼번호
			public string strCameraSerialNumber;
			// 카메라 픽셀 해상도
			public double dResolution;
            // 카메라 버츄얼 객체에 연결 해줄 카메라 리얼 객체
            public object objCamera = new object();
            // 3D센서용 카메라 IP
            public string str3DCameraIP;

			public struct structureCameraConfig
			{
				// X 반전
				public bool bReverseX;
				// Y 반전
				public bool bReverseY;
				// 90도 회전
				public bool bRotation90;
				// 180도 회전
				public bool bRotation180;
				// 270도 회전
				public bool bRotation270;
				// 게인
				public double dGain;
				// 노출
				public double dExposureTime;
				// 카메라 가로 픽셀
				public int iCameraWidth;
				// 카메라 세로 픽셀
				public int iCameraHeight;
				// 카메라 X Offset
				public int iCameraXOffset;
				// 카메라 Y Offset
				public int iCameraYOffset;
				// FrameRate
				public double dFrameRate;
			}

			public structureCameraConfig objCameraConfig = new structureCameraConfig();

			public object Clone()
			{
				CInitializeParameter objInitializeParameter = new CInitializeParameter();
                objInitializeParameter.objCamera = new object();

                objInitializeParameter.eUseCameraType = eUseCameraType;
				objInitializeParameter.iIndex = iIndex;
				objInitializeParameter.strCameraSerialNumber = strCameraSerialNumber;
                objInitializeParameter.str3DCameraIP = str3DCameraIP;
                objInitializeParameter.dResolution = dResolution;
                objInitializeParameter.objCamera = objCamera;
				objInitializeParameter.objCameraConfig.bReverseX = objCameraConfig.bReverseX;
				objInitializeParameter.objCameraConfig.bReverseY = objCameraConfig.bReverseY;
				objInitializeParameter.objCameraConfig.bRotation90 = objCameraConfig.bRotation90;
				objInitializeParameter.objCameraConfig.bRotation180 = objCameraConfig.bRotation180;
				objInitializeParameter.objCameraConfig.bRotation270 = objCameraConfig.bRotation270;
				objInitializeParameter.objCameraConfig.dGain = objCameraConfig.dGain;
				objInitializeParameter.objCameraConfig.dExposureTime = objCameraConfig.dExposureTime;
				objInitializeParameter.objCameraConfig.iCameraWidth = objCameraConfig.iCameraWidth;
				objInitializeParameter.objCameraConfig.iCameraHeight = objCameraConfig.iCameraHeight;
				objInitializeParameter.objCameraConfig.iCameraXOffset = objCameraConfig.iCameraXOffset;
				objInitializeParameter.objCameraConfig.iCameraYOffset = objCameraConfig.iCameraYOffset;
				objInitializeParameter.objCameraConfig.dFrameRate = objCameraConfig.dFrameRate;

				return objInitializeParameter;
			}
		}

        public class CImageData3D {
            // 센서 높이 해상도
            public int iOffsetZ;
            public int iResolutionY;
            public int iResolutionX;
            public int iResolutionZ;
            public int iWidth;
            public int iHeight;
            // 높이데이터를 이용한 이미지
            public Bitmap objBitmapHeight;
            // 밝기데이터를 이용한 이미지
            public Bitmap objBitmapIntensity;
            // 센서에서 받은 높이데이터
            public short[] objHeightDataOrigin;
            // 센서에서 받은 밝기
            public byte[] objIntensityDataOrigin;
            
            // -32768인가? 끝부분 없는데이터 삭제한 데이터
            public short[] objHeightDataCrop;
            public byte[] objIntensityDataCrop;

            public CImageData3D()
            {
                objBitmapHeight = new Bitmap( 10, 10 );
                objBitmapIntensity = new Bitmap( 10, 10 );
            }
        }
        public class CImageData : ICloneable {
            public bool bGrabComplete = false;
            public Bitmap bitmapImage = null;
            public int iImageWidth = 0;
            public int iImageHeight = 0;
            public int iMultiGrabImageIndex = 0;
            public CImageData3D objCameraData3D = new CImageData3D();
            public object Clone()
            {
                CImageData objImageData = new CImageData();
                objImageData.bGrabComplete = bGrabComplete;
                objImageData.bitmapImage = ( Bitmap )bitmapImage.Clone();
                objImageData.iImageWidth = iImageWidth;
                objImageData.iImageHeight = iImageHeight;
                objImageData.iMultiGrabImageIndex = iMultiGrabImageIndex;
                objImageData.objCameraData3D = objCameraData3D;

                return objImageData;
            }

        }
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //생성 : 
        //추가 : 
        //목적 : 알람 발생 확인 클래스
        //설명 : 함수 호출 시 반환 형
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public class CCameraError : ICloneable
		{
			// 이벤트 발생 시간
			public string strEventTime;
			// 수행된 함수 이름
			public string strFunctionName;
			// 알람 리턴 결과
			public int iReturnCode;
			// 알람 메세지
			public string strMessage;

			public object Clone()
			{
				CCameraError objError = new CCameraError();
				objError.strEventTime = this.strEventTime;
				objError.strFunctionName = this.strFunctionName;
				objError.iReturnCode = this.iReturnCode;
				objError.strMessage = this.strMessage;

				return objError;
			}
		}

		// 델리게이트 선언
		public delegate void CallBackFunctionGrabImage( CImageData objImageData );
		// Trace 콜백
		public delegate void CallBackTraceMessage( string strTrace );
		// 그랩 에러 콜백
		public delegate void CallBackGrabError();

		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//생성 : 
		//수정 : 
		//목적 : 초기화 추상객체
		//설명 : 
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public abstract bool HLInitialize( CInitializeParameter objInitializeParameter );

		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//생성 : 
		//수정 : 
		//목적 : 해제 추상객체
		//설명 : 
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		public abstract void HLDeInitialize();

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //생성 : 
        //수정 : 
        //목적 : 카메라 디바이스 객체
        //설명 : 
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public abstract object HLGetDeviceObject();

		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//생성 : 
		//수정 : 
		//목적 : 버전 추상객체
		//설명 : 
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		public abstract string HLGetVersion();

		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//생성 : 
		//수정 : 
		//목적 : 콜백
		//설명 : 
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		public virtual void HLSetCallbackFunctionGrabImage( CallBackFunctionGrabImage objCallback )
		{
		}

		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//생성 : 
		//수정 : 
		//목적 : Trace 콜백
		//설명 : 
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		public virtual void HLSetCallbackTraceMessage( CallBackTraceMessage objCallback )
		{
		}

		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//생성 : 
		//수정 : 
		//목적 : 그랩 에러 콜백
		//설명 : 
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		public virtual void HLSetCallbackGrabError( CallBackGrabError objCallback )
		{
		}

		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//생성 : 
		//수정 : 
		//목적 : 접속 상태
		//설명 : 
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		public virtual bool HLIsConnected()
		{
			bool bReturn = false;

			do {
			} while( false );

			return bReturn;
		}

		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//생성 : 
		//수정 : 
		//목적 : Camera Config ( Gain, Reverse .. )
		//설명 : 
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		public virtual bool HLSetCameraConfig( CInitializeParameter.structureCameraConfig objCameraConfig )
		{
			bool bReturn = false;

			do {
			} while( false );

			return bReturn;
		}

		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//생성 : 
		//수정 : 
		//목적 : Gain
		//설명 : 
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		public virtual double HLGetGain()
		{
			return 0.0;
		}

		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//생성 : 
		//수정 : 
		//목적 : Gain
		//설명 : 
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		public virtual bool HLSetGain( double dGain )
		{
			bool bReturn = false;

			do {
			} while( false );

			return bReturn;
		}

		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//생성 : 
		//수정 : 
		//목적 : ExposureTime
		//설명 : 
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		public virtual double HLGetExposureTime()
		{
			return 0.0;
		}

		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//생성 : 
		//수정 : 
		//목적 : ExposureTime
		//설명 : 
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		public virtual bool HLSetExposureTime( double dExposureTime )
		{
			bool bReturn = false;

			do {
			} while( false );

			return bReturn;
		}

		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//생성 : 
		//수정 : 
		//목적 : 카메라 픽셀 넓이 반환
		//설명 : 
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		public virtual int HLGetWidth()
		{
			return 0;
		}

		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//생성 : 
		//수정 : 
		//목적 : 카메라 픽셀 넓이 설정
		//설명 : 
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		public virtual bool HLSetWidth( int iWidth )
		{
			bool bReturn = false;

			do {
			} while( false );

			return bReturn;
		}

		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//생성 : 
		//수정 : 
		//목적 : 카메라 픽셀 높이 반환
		//설명 : 
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		public virtual int HLGetHeight()
		{
			return 0;
		}

		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//생성 : 
		//수정 : 
		//목적 : 카메라 픽셀 높이 설정
		//설명 : 
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		public virtual bool HLSetHeight( int iHeight )
		{
			bool bReturn = false;

			do {
			} while( false );

			return bReturn;
		}

		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//생성 : 
		//수정 : 
		//목적 : 카메라 X Offset 반환
		//설명 : 
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		public virtual int HLGetXOffset()
		{
			return 0;
		}

		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//생성 : 
		//수정 : 
		//목적 : 카메라 X Offset 설정
		//설명 : 
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		public virtual bool HLSetXOffset( int iOffset )
		{
			bool bReturn = false;

			do {
			} while( false );

			return bReturn;
		}

		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//생성 : 
		//수정 : 
		//목적 : 카메라 Y Offset 반환
		//설명 : 
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		public virtual int HLGetYOffset()
		{
			return 0;
		}

		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//생성 : 
		//수정 : 
		//목적 : 카메라 Y Offset 설정
		//설명 : 
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		public virtual bool HLSetYOffset( int iOffset )
		{
			bool bReturn = false;

			do {
			} while( false );

			return bReturn;
		}

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //생성 : 
        //수정 : 
        //목적 : 카메라 Y Offset 설정
        //설명 : 
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public virtual bool HLSetOffsetCenter( bool bCenterX, bool bCenterY )
        {
            bool bReturn = false;

            do {
            } while( false );

            return bReturn;
        }

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //생성 : 
        //수정 : 
        //목적 : FrameRate
        //설명 : 
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public virtual double HLGetFrameRate()
		{
			return 0.0;
		}

		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//생성 : 
		//수정 : 
		//목적 : FrameRate
		//설명 : 
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		public virtual bool HLSetFrameRate( double dFrameRate )
		{
			bool bReturn = false;

			do {
			} while( false );

			return bReturn;
		}

		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//생성 : 
		//수정 : 
		//목적 : 하트비트 타임 아웃 설정
		//설명 : 
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		public virtual bool HLSetHeartBeatTimeOut( int iMilliseconds )
		{
			bool bReturn = false;

			do {
			} while( false );

			return bReturn;
		}

		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//생성 : 
		//수정 : 
		//목적 : Reverse X
		//설명 : 
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		public virtual bool HLSetReverseX( bool bReverse )
		{
			bool bReturn = false;

			do {
			} while( false );

			return bReturn;
		}

		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//생성 : 
		//수정 : 
		//목적 : Reverse Y
		//설명 : 
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		public virtual bool HLSetReverseY( bool bReverse )
		{
			bool bReturn = false;

			do {
			} while( false );

			return bReturn;
		}

		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//생성 : 
		//수정 : 
		//목적 : 90도 회전
		//설명 : 
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		public virtual bool HLSetRotation90( bool bRotation )
		{
			bool bReturn = false;

			do {
			} while( false );

			return bReturn;
		}

		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//생성 : 
		//수정 : 
		//목적 : 180도 회전
		//설명 : 
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		public virtual bool HLSetRotation180( bool bRotation )
		{
			bool bReturn = false;

			do {
			} while( false );

			return bReturn;
		}

		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//생성 : 
		//수정 : 
		//목적 : 270도 회전
		//설명 : 
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		public virtual bool HLSetRotation270( bool bRotation )
		{
			bool bReturn = false;

			do {
			} while( false );

			return bReturn;
		}

		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//생성 : 
		//수정 : 
		//목적 : Packet Size
		//설명 : 
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		public virtual int HLGetPacketSize()
		{
			return 0;
		}

		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//생성 : 
		//수정 : 
		//목적 : Packet Size
		//설명 : 
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		public virtual bool HLSetPacketSize( int iPacketSize )
		{
			bool bReturn = false;

			do {
			} while( false );

			return bReturn;
		}

		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//생성 : 
		//수정 : 
		//목적 : 트리거 셀렉터 변경
		//설명 : 
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		public virtual bool HLSetTriggerSelector( enumTriggerSelector eTriggerSelector )
		{
			bool bReturn = false;

			do {
			} while( false );

			return bReturn;
		}

		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//생성 : 
		//수정 : 
		//목적 : 트리거 모드 변경
		//설명 : 
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		public virtual bool HLSetTriggerMode( enumTriggerMode eTriggerMode )
		{
			bool bReturn = false;

			do {
			} while( false );

			return bReturn;
		}

		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//생성 : 
		//수정 : 
		//목적 : 트리거 소스 변경
		//설명 : 
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		public virtual bool HLSetTriggerSource( enumTriggerSource eTriggerSource )
		{
			bool bReturn = false;

			do {
			} while( false );

			return bReturn;
		}

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //생성 : 
        //수정 : 
        //목적 : 트리거 소스 변경
        //설명 : 
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public virtual bool HLSetLineSelect( enumLineSelector eLineSelect ) 
        {
            bool bReturn = false;

            do
            {
            } while ( false );

            return bReturn;
        }

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //생성 : 
        //수정 : 
        //목적 : 트리거 소스 변경
        //설명 : 
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public virtual bool HLSetLineSource( enumLineSource eLineSource )
        {
            bool bReturn = false;

            do
            {
            } while ( false );

            return bReturn;
        }

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //생성 : 
        //수정 : 
        //목적 : StartSingleGrab
        //설명 : 
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public virtual bool HLStartSingleGrab()
		{
			bool bReturn = false;

			do {
			} while( false );

			return bReturn;
		}

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //생성 : 
        //수정 : 
        //목적 : StartSingleGrab
        //설명 : 
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public virtual bool HLStartMultiGrab()
        {
            bool bReturn = false;

            do
            {
            } while ( false );

            return bReturn;
        }

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //생성 : 
        //수정 : 
        //목적 : SetContinousGrab
        //설명 : 
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public virtual bool HLSetContinousGrab()
		{
			bool bReturn = false;

			do {
			} while( false );

			return bReturn;
		}

		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//생성 : 
		//수정 : 
		//목적 : SetSingleGrab
		//설명 : 
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		public virtual bool HLSetSingleGrab()
		{
			bool bReturn = false;

			do {
			} while( false );

			return bReturn;
		}

		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//생성 : 
		//수정 : 
		//목적 : 소프트웨어 트리거
		//설명 : 
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		public virtual bool HLSetSoftwareTrigger()
		{
			bool bReturn = false;
			do {
			} while( false );
			return bReturn;
		}

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //생성 : 
        //수정 : 
        //목적 : 3D 센서( Gocator )
        //설명 : 
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public virtual bool HL3DAlign()
        {
            bool bReturn = false;
            do {
            } while( false );
            return bReturn;
        }

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //생성 : 
        //수정 : 
        //목적 : 3D 센서( Gocator )
        //설명 : 
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public virtual bool HL3DBackup( string strDestPath)
        {
            bool bReturn = false;
            do {
            } while( false );
            return bReturn;
        }

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //생성 : 
        //수정 : 
        //목적 : 3D 센서( Gocator )
        //설명 : 
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public virtual bool HL3DCancel()
        {
            bool bReturn = false;
            do {
            } while( false );
            return bReturn;
        }

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //생성 : 
        //수정 : 
        //목적 : 3D 센서( Gocator )
        //설명 : 
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public virtual bool HL3DCanStart()
        {
            bool bReturn = false;
            do {
            } while( false );
            return bReturn;
        }

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //생성 : 
        //수정 : 
        //목적 : 3D 센서( Gocator )
        //설명 : 
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public virtual bool HL3DStart()
        {
            bool bReturn = false;
            do {
            } while( false );
            return bReturn;
        }

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //생성 : 
        //수정 : 
        //목적 : 3D 센서( Gocator )
        //설명 : 
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public virtual bool HL3DStart( int iIndex )
        {
            bool bReturn = false;
            do {
            } while( false );
            return bReturn;
        }

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //생성 : 
        //수정 : 
        //목적 : 3D 센서( Gocator )
        //설명 : 
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public virtual bool HL3DStop()
        {
            bool bReturn = false;
            do {
            } while( false );
            return bReturn;
        }

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //생성 : 
        //수정 : 
        //목적 : 3D 센서( Gocator )
        //설명 : 
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public virtual bool HL3DReset( bool bWait)
        {
            bool bReturn = false;
            do {
            } while( false );
            return bReturn;
        }

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //생성 : 
        //수정 : 
        //목적 : 3D 센서( Gocator )
        //설명 : 
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public virtual bool HL3DResetEncoder()
        {
            bool bReturn = false;
            do {
            } while( false );
            return bReturn;
        }

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //생성 : 
        //수정 : 
        //목적 : 3D 센서( Gocator )
        //설명 : 
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public virtual bool HL3DScheduledStart( long lValue )
        {
            bool bReturn = false;
            do {
            } while( false );
            return bReturn;
        }

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //생성 : 
        //수정 : 
        //목적 : 3D 센서( Gocator )
        //설명 : 
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public virtual bool HL3DSnapshot()
        {
            bool bReturn = false;
            do {
            } while( false );
            return bReturn;
        }

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //생성 : 
        //수정 : 
        //목적 : 3D 센서( Gocator )
        //설명 : 
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public virtual bool HL3DSaveBitmap( string strDestPath )
        {
            bool bReturn = false;
            do {
            } while( false );
            return bReturn;
        }

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //생성 : 
        //수정 : 
        //목적 : 3D 센서( Gocator )
        //설명 : 
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public virtual bool HL3DSaveCSV( string strDestPath )
        {
            bool bReturn = false;
            do {
            } while( false );
            return bReturn;
        }

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //생성 : 
        //수정 : 
        //목적 : 3D 센서( Gocator )
        //설명 : 
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public virtual bool HL3DTrigger()
        {
            bool bReturn = false;
            do {
            } while( false );
            return bReturn;
        }

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //생성 : 
        //수정 : 
        //목적 : 3D 센서( Gocator )
        //설명 : 
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public virtual bool HL3DWaitForBuddies( ulong uTimeOut )
        {
            bool bReturn = false;
            do {
            } while( false );
            return bReturn;
        }

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //생성 : 
        //수정 : 
        //목적 : 3D 센서( Gocator )
        //설명 : 
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public virtual bool HL3DSetScanLength( int iScanLength )
        {
            bool bReturn = false;
            do {
            } while( false );
            return bReturn;
        }

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //생성 : 
        //수정 : 
        //목적 : 3D 센서( Gocator )
        //설명 : 스캔 폭 설정
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public virtual bool HL3DSetScanWidth( double dWidth )
        {
            bool bReturn = false;
            do {
            } while( false );
            return bReturn;
        }

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //생성 : 
        //수정 : 
        //목적 : 3D 센서( Gocator )
        //설명 : 스캔 폭 설정
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public virtual bool HL3DSetScanMaxWidth()
        {
            bool bReturn = false;
            do {
            } while( false );
            return bReturn;
        }

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //생성 : 
        //수정 : 
        //목적 : 3D 센서( Gocator )
        //설명 : 스캔 폭 설정
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public virtual bool HL3DSetSimulationImage( string strPath  )
        {
            bool bReturn = false;
            do {
            } while( false );
            return bReturn;
        }
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //생성 : 
        //수정 : 
        //목적 : 
        //설명 : 
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public virtual bool HLSetImageFile( string strPath )
        {
            bool bReturn = false;
            do {
            } while( false );
            return bReturn;
        }
        
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //생성 : 
        //추가 : 
        //목적 : 현재 알람 상태 정보를 리턴한다.
        //설명 : 
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public virtual CDeviceCameraAbstract.CCameraError HLGetErrorCode()
		{
			CDeviceCameraAbstract.CCameraError objError = new CDeviceCameraAbstract.CCameraError();
			return objError;
		}
	}
}