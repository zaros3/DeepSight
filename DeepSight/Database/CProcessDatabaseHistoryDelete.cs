using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace DeepSight
{
	class CProcessDatabaseHistoryDelete
	{
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//private property
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// 상위 클래스
		private CProcessDatabase m_objProcessDatabase;
		// 시스템 타이머
		private Timer m_objSystemTimer;
		// SQLite
		private CSQLite m_objSQLite;

		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//생성 : 
		//추가 : 
		//목적 : 생성자 함수
		//설명 : 
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		public CProcessDatabaseHistoryDelete()
		{

		}

		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//생성 : 
		//추가 : 
		//목적 : 초기화 함수
		//설명 : 
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		public bool Initialize( CProcessDatabase objProcessDatabase, CSQLite objSQLite )
		{
			bool bReturn = false;

			do {
				// 프로세스 데이터베이스 이어줌
				m_objProcessDatabase = objProcessDatabase;
				// SQLite 이어줌
				m_objSQLite = objSQLite;
				// 타이머에 대한 콜백 메서드 정의
				m_objSystemTimer = new Timer( SetDeleteHistory );
				// 지연시간, 기간 (ms) 한 시간마다 주기로 호출되게 설정
				m_objSystemTimer.Change( 1000, ( int )new TimeSpan( 1, 0, 0 ).TotalMilliseconds );

				bReturn = true;
			} while( false );

			return bReturn;
		}

		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//생성 : 
		//추가 : 
		//목적 : 해제
		//설명 : 
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		public void DeInitialize()
		{
			if( null != m_objSystemTimer ) {
				m_objSystemTimer.Change( Timeout.Infinite, Timeout.Infinite );
				m_objSystemTimer.Dispose();
			}
		}

		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//생성 : 
		//추가 : 
		//목적 : 히스토리 삭제 쿼리 날려줌
		//설명 : 
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		private void SetDeleteHistory( Object state )
		{
			var pDocument = CDocument.GetDocument;
			CConfig.CDatabaseParameter objDatabaseParameter = pDocument.m_objConfig.GetDatabaseParameter();
			CManagerTable objHistoryAlign = m_objProcessDatabase.m_objProcessDatabaseHistory.m_objManagerTableHistoryAlign;
			CManagerTable objHistoryInspection = m_objProcessDatabase.m_objProcessDatabaseHistory.m_objManagerTableHistoryInspection;
            
			// 트랜잭션 시작
			lock( m_objSQLite ) {
				var objTransaction = m_objSQLite.HLBeginTransaction();
				// 특정 기간 이전 히스토리를 삭제하는 쿼리
				SetDeleteHistory( objHistoryAlign, ( int )CDatabaseDefine.enumHistoryAlign.DATE, pDocument.m_objConfig.GetSystemParameter().iPeriodDatabase );
				// 커밋
				m_objSQLite.HLCommit( objTransaction );
			}
		}

		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//생성 : 
		//추가 : 
		//목적 : 히스토리 삭제 쿼리 날려줌
		//설명 : 
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		private void SetDeleteHistory( CManagerTable objManagerTable, int iIndex, int iDeletePeriod )
		{
			// 금일을 기준으로 특정일을 계산해야함
			DateTime objDate = DateTime.Today;
			string strQuery = string.Format( "delete from {0} where {1} < datetime('{2}')",
				objManagerTable.HLGetTableName(), objManagerTable.HLGetTableSchemaName()[ iIndex ],
				string.Format( "{0} 23:59:59", objDate.AddDays( -1 * Math.Abs( iDeletePeriod ) ).ToString( CDatabaseDefine.DEF_DATE_FORMAT ) ) );
			m_objSQLite.HLExecute( strQuery );
		}
	}
}